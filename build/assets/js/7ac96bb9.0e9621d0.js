"use strict";(self.webpackChunkpublic_documentation=self.webpackChunkpublic_documentation||[]).push([[4860],{8684:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(4848),s=t(8453);const o={sidebar_label:"CLI Config",id:"cli-config-guide",title:"Config With the CLI",description:"A guide to setting configurations with the Codiac CLI.",tags:["Intro","Getting started"]},c=void 0,r={id:"guides/manage/cli-config-guide",title:"Config With the CLI",description:"A guide to setting configurations with the Codiac CLI.",source:"@site/docs/guides/manage/cli-config-guide.md",sourceDirName:"guides/manage",slug:"/guides/manage/cli-config-guide",permalink:"/docs/guides/manage/cli-config-guide",draft:!1,unlisted:!1,tags:[{label:"Intro",permalink:"/docs/tags/intro"},{label:"Getting started",permalink:"/docs/tags/getting-started"}],version:"current",frontMatter:{sidebar_label:"CLI Config",id:"cli-config-guide",title:"Config With the CLI",description:"A guide to setting configurations with the Codiac CLI.",tags:["Intro","Getting started"]},sidebar:"tutorialSidebar",previous:{title:"Existing Logging",permalink:"/docs/guides/logging/existing-logging-guide"},next:{title:"Configuration Management",permalink:"/docs/guides/manage/configuration-management-guide"}},a={},d=[{value:"Declaring Config Settings",id:"declaring-config-settings",level:3},{value:"Deleting Settings",id:"deleting-settings",level:3},{value:"Interactively",id:"interactively",level:4},{value:"Without need for prompts",id:"without-need-for-prompts",level:4},{value:"Using pipes",id:"using-pipes",level:4},{value:"Summary",id:"summary",level:2}];function l(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"declaring-config-settings",children:"Declaring Config Settings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cod config set\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now let's write this command again to run without prompting so that we can run it in our script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cod config set --to-script\n"})}),"\n",(0,i.jsx)(n.h3,{id:"deleting-settings",children:"Deleting Settings"}),"\n",(0,i.jsx)(n.h4,{id:"interactively",children:"Interactively"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cod config delete\n"})}),"\n",(0,i.jsx)(n.h4,{id:"without-need-for-prompts",children:"Without need for prompts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cod config delete --asset my-api --file app/app-config.json --enviro dev \\\n  --setting hometown --setting favorite-color --setting db.username --setting db.secret --setting db.name --setting db.server\n"})}),"\n",(0,i.jsx)(n.h4,{id:"using-pipes",children:"Using pipes"}),"\n",(0,i.jsxs)(n.p,{children:["Let's retrieve all the settings at the environment level for the ",(0,i.jsx)(n.code,{children:"dev"})," environment..."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cod config settings get -a my-api -e dev -f app-config.json\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now let's use some pipes in the cli to copy all of those settings into the qa environment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cod config settings get -a my-api -e dev -f app-config.json | cod config set -a my-api -f app/app-config.json -e qa \n"})}),"\n",(0,i.jsx)(n.p,{children:"What if we want to adjust the values before we copy them out?  We can write then to a file instead...``"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"cod config settings get -a my-api -e dev -f app-config.json > temp-settings.json\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This allows us to then open up ",(0,i.jsx)(n.code,{children:"temp-settings.json"})," and change some values.\nLet's change ",(0,i.jsx)(n.code,{children:"Hometown"})," to ",(0,i.jsx)(n.code,{children:"Chicago"})," the db.server to ",(0,i.jsx)(n.code,{children:"mongo.qa.ourcompany.com"}),", and the user and password to reference the secrets for qa."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "hometown": "Chicago",\n  "db": {\n    "server": "mongo.qa.ourcompany.com",\n    "name": "growing",\n    "user": "#REF|our-secret-store|growdb-qa-user",\n    "password": "#REF|our-secret-store|growdb-qa-password"\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now we can pipe those settings into a ",(0,i.jsx)(n.code,{children:"cod config set"})," command to add settings for the qa environment..."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cat temp-settings.json | cod config set -a my-api -f app/app-config.json -e qa\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now let's refresh the qa cabinet with the latest settings:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cod config deploy -a my-api -f app-app-config.json -c sprint15\n"})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"There's basically 3 main points to remember:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The commands ",(0,i.jsx)(n.code,{children:"cod config delete"})," and ",(0,i.jsx)(n.code,{children:"cod config set"})," read in ONLY setting/value pairs.  You have to set the destinations (asset, file, cabinet, etc) on these commands to declare where they will be written (no matter where the piped input came from)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["TTY User interaction gets disabled when you pipe stdin.  It get automatically sets the ",(0,i.jsx)(n.code,{children:"--silent"})," flag, so you have to get your destination command set up the way you like it before you execute it."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["the ",(0,i.jsx)(n.code,{children:"--setting"})," arg is multi-use on ",(0,i.jsx)(n.code,{children:"cod config delete"}),", and it supports globbing.  eg: ",(0,i.jsx)(n.code,{children:"--setting 'db.*'"}),".",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"USE LITERAL QUOTATIONS WHEN GLOBBING"}),": Otherwise your shell may execute the glob in the current working directory before Codiac gets a chance to interpret it.  That is, your shell may automatically pass a list of local files matching your glob to the Codiac CLI instead of the glob pattern itself."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Point 1 allows you to do batch deletes, batch edits, and batch copies.\nPoint 2 will tell you when it's unhappy."})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var i=t(6540);const s={},o=i.createContext(s);function c(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);