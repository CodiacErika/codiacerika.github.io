"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var path = require("path");

var fs = require("fs");

var parseMD = require("parse-md")["default"];

var globby = require("globby");

var glossaryHeader = "---\nid: glossary\ntitle: Glossary\n---";

Array.prototype.diff = function (a) {
  return this.filter(function (i) {
    return a.indexOf(i) < 0;
  });
};

function getFiles(_x, _x2) {
  return _getFiles.apply(this, arguments);
}

function _getFiles() {
  _getFiles = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(basePath, noParseFiles) {
    var noThrow,
        files,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            noThrow = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
            // Added the noThrow optional param
            // in case there is a call to this
            // function that does not want to
            // handle the error thrown
            files = []; // get all files under dir

            _context.prev = 2;
            _context.next = 5;
            return globby(basePath + "**/*.{md,mdx}");

          case 5:
            files = _context.sent;
            _context.next = 14;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](2);

            if (!noThrow) {
              _context.next = 13;
              break;
            }

            _context.next = 14;
            break;

          case 13:
            throw _context.t0;

          case 14:
            ; // filter with the noParseFiles option and return

            return _context.abrupt("return", files.diff(noParseFiles));

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 8]]);
  }));
  return _getFiles.apply(this, arguments);
}

function preloadTerms(_x3) {
  return _preloadTerms.apply(this, arguments);
}

function _preloadTerms() {
  _preloadTerms = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(termsFiles) {
    var terms, _iterator, _step, term, fileContent, _parseMD, metadata, data;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            terms = [];
            _iterator = _createForOfIteratorHelper(termsFiles);
            _context2.prev = 2;

            _iterator.s();

          case 4:
            if ((_step = _iterator.n()).done) {
              _context2.next = 21;
              break;
            }

            term = _step.value;
            fileContent = "";
            _context2.prev = 7;
            _context2.next = 10;
            return fs.promises.readFile(term, "utf8");

          case 10:
            fileContent = _context2.sent;
            _context2.next = 17;
            break;

          case 13:
            _context2.prev = 13;
            _context2.t0 = _context2["catch"](7);
            _context2.t0.code === 'ENOENT' ? console.log("File ".concat(term, " not found.")) : console.log("".concat(_context2.t0, "\nExiting..."));
            process.exit(1);

          case 17:
            _parseMD = parseMD(fileContent), metadata = _parseMD.metadata;

            if (!metadata.id) {
              console.log("! The term \"".concat(term, "\" lacks the attribute \"id\" and so is ") + "excluded from the term parsing functionality.");
            } else {
              if (!metadata.hoverText || metadata.hoverText.length == 0) {
                console.log("! The term \"".concat(term, "\" lacks the attribute \"hoverText\", ") + "so no popup text will be shown.");
              }

              data = {
                content: fileContent,
                filepath: term,
                hoverText: metadata.hoverText || "",
                glossaryText: metadata.glossaryText || "",
                type: metadata.type || "",
                id: metadata.id,
                title: metadata.title || ""
              };
              terms.push(data);
            }

          case 19:
            _context2.next = 4;
            break;

          case 21:
            _context2.next = 26;
            break;

          case 23:
            _context2.prev = 23;
            _context2.t1 = _context2["catch"](2);

            _iterator.e(_context2.t1);

          case 26:
            _context2.prev = 26;

            _iterator.f();

            return _context2.finish(26);

          case 29:
            return _context2.abrupt("return", terms);

          case 30:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[2, 23, 26, 29], [7, 13]]);
  }));
  return _preloadTerms.apply(this, arguments);
}

function getCleanTokens(match, separator) {
  var tokens = match.split(separator); // remove file extension, if present

  tokens[1] = tokens[1].replace(/\.[^/.]+$/, "");
  tokens.forEach(function (token, index) {
    tokens[index] = token.replace(/[\%]/g, "");
  });
  return tokens;
}

function splice(cont, idx, rem, str) {
  return cont.slice(0, idx) + str + cont.slice(idx + Math.abs(rem));
}

function getHeaders(content) {
  var index = content.indexOf("---", 1) + "---".length; // slice the headers of the file

  return content.slice(0, index);
}

function addJSImportStatement(content) {
  var importStatement = "\n\nimport Term " + "from \"@docusaurus-terminology/term\";\n";
  return importStatement + content;
}

function sortFiles(files) {
  files.sort(function (a, b) {
    return a.title.toLowerCase() > b.title.toLowerCase() ? 1 : b.title.toLowerCase() > a.title.toLowerCase() ? -1 : 0;
  });
}

function cleanGlossaryTerms(terms) {
  var cleanTerms = terms.filter(function (item) {
    return item.title && item.title.length > 0 ? true : console.log("! The file ".concat(item.filepath, " lacks the attribute \"title\" and so is ") + "excluded from the glossary.");
  }); // handle debug case here

  return cleanTerms;
}

function filterTypeTerms(terms, glossaryTermPatterns) {
  if (glossaryTermPatterns.length == 0) {
    console.log("! No glossaryTermPatterns were specified to filter " + "terms by type.");
    return terms;
  }

  var typeTerms = terms.filter(function (item) {
    return glossaryTermPatterns.indexOf(item.type) > -1 ? true : console.log("! The attribute \"type\" of term \"".concat(item.id, "\" is missing or does not ") + "match any type listed in the glossaryTermPatterns.");
  });
  return typeTerms;
}

function getGlossaryTerm(term, path) {
  var hover = term.glossaryText != undefined ? term.glossaryText : "";

  if (hover.length <= 0) {
    hover = term.hoverText != undefined ? term.hoverText : "";
  }

  return hover.length > 0 ? "\n\n### [".concat(term.title, "](").concat(path, ") \n").concat(hover, "\n") : "\n\n### [".concat(term.title, "](").concat(path, ")");
}

function getOrCreateGlossaryFile(path) {
  var fileContent = ""; // TODO: Replace with async fs function

  if (!fs.existsSync(path)) {
    console.log("! Glossary file does not exist in path: \"".concat(path, "\". Creating..."));
    fileContent = glossaryHeader; // TODO: Replace with async fs function

    fs.writeFileSync(path, fileContent, "utf8", function (error) {
      if (error) throw error;
    });
  } else {
    // keep only the header of file
    // TODO: Replace with async fs function
    var content = fs.readFileSync(path, "utf8", function (err, data) {
      console.log(err);
    });
    var index = content.indexOf("---", 1) + "---".length;
    fileContent = content.slice(0, index);
  }

  return fileContent;
}

function getRelativePath(source, target, opts) {
  // calculate relative path from each file's parent dir
  var sourceDir = source.substr(0, source.lastIndexOf("/"));
  var targetDir = target.substr(0, target.lastIndexOf("/")); //const relative_url = path.relative(sourceDir, targetDir);

  var relative_url = path.relative(opts.termsDir, targetDir);
  var final_url = path.join(opts.termsUrl, relative_url, target.substr(target.lastIndexOf("/"))); // construct the final url by appending the target's filename
  // if the relative url is empty, it means that the referenced
  // term is in the same dir, so add a `.`
  //let final_url = relative_url === ""
  //  ? "." + target.substr(target.lastIndexOf("/"))
  //  : relative_url + target.substr(target.lastIndexOf("/"));
  //console.log(new_rel_url, new_final_url);
  //  remove .mdx suffix

  return final_url.replace(/(\.mdx?)/g, "");
}

module.exports = {
  getFiles: getFiles,
  getRelativePath: getRelativePath,
  getCleanTokens: getCleanTokens,
  preloadTerms: preloadTerms,
  getHeaders: getHeaders,
  addJSImportStatement: addJSImportStatement,
  sortFiles: sortFiles,
  cleanGlossaryTerms: cleanGlossaryTerms,
  filterTypeTerms: filterTypeTerms,
  getGlossaryTerm: getGlossaryTerm,
  getOrCreateGlossaryFile: getOrCreateGlossaryFile
};