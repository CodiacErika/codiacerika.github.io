"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var path = require("path");

var parser = require("./commands/parser.js");

var glossary = require("./commands/glossary.js");

var validateOptions = require("./validator.js");

var DEFAULT_OPTIONS = {
  docsDir: "./docs/",
  termsDir: "./docs/terms/",
  termsUrl: "/docs/terms",
  glossaryFilepath: "./docs/glossary.md",
  patternSeparator: "|",
  noParseFiles: [],
  noGlossaryFiles: [],
  glossaryTermPatterns: [],
  dryRun: false,
  debug: false
};

module.exports = function (context, opts) {
  // initialize options
  var options = {};
  !opts.termsDir && console.log("\n! No option for terms directory found, " + "using default directory \"".concat(DEFAULT_OPTIONS.termsDir, "\"\n"));
  options = Object.assign({}, DEFAULT_OPTIONS, opts);
  validateOptions(options);
  options.termsUrl = path.join(context.baseUrl, options.termsDir, "/");
  options.termsDir = path.resolve(options.termsDir) + "/";
  options.docsDir = path.resolve(options.docsDir) + "/";
  options.glossaryFilepath = path.resolve(options.glossaryFilepath);

  var _iterator = _createForOfIteratorHelper(options.noParseFiles.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = (0, _slicedToArray2["default"])(_step.value, 2),
          index = _step$value[0],
          item = _step$value[1];

      options.noParseFiles[index] = path.resolve(process.cwd(), item);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _iterator2 = _createForOfIteratorHelper(options.noGlossaryFiles.entries()),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = (0, _slicedToArray2["default"])(_step2.value, 2),
          _index = _step2$value[0],
          _item = _step2$value[1];

      options.noGlossaryFiles[_index] = path.resolve(process.cwd(), _item);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return {
    name: "terminology-parser",
    extendCli: function extendCli(cli) {
      cli.command("parse").option("--dry-run", "see what the command will do").option("--debug", "see all log output of the command").description("Parse all md files to replace terms").action(function (args) {
        // check for dry-run and debug
        options.dryRun = args.dryRun ? true : false;
        options.debug = args.debug ? true : false;
        console.log("Replacing patterns with <Term />");
        parser(options);
      });
      cli.command("glossary").option("--dry-run", "see what the command will do").option("--debug", "see all log output of the command").description("Generate a glossary of terms").action(function (args) {
        // check for dry-run and debug
        options.dryRun = args.dryRun ? true : false;
        options.debug = args.debug ? true : false;
        console.log("Alphabetical list of terms");
        glossary(options);
      });
    }
  };
};