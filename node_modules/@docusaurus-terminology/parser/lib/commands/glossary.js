"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var fs = require("fs");

var parser = require("./parser.js");

var path = require("path");

var _require = require("../lib.js"),
    getFiles = _require.getFiles,
    preloadTerms = _require.preloadTerms,
    getCleanTokens = _require.getCleanTokens,
    cleanGlossaryTerms = _require.cleanGlossaryTerms,
    filterTypeTerms = _require.filterTypeTerms,
    getRelativePath = _require.getRelativePath,
    getGlossaryTerm = _require.getGlossaryTerm,
    sortFiles = _require.sortFiles,
    getOrCreateGlossaryFile = _require.getOrCreateGlossaryFile;

function glossary(_x) {
  return _glossary.apply(this, arguments);
}

function _glossary() {
  _glossary = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(options) {
    var glossaryContent, termsFiles, termsData, cleanTerms, termsByType, _iterator, _step, term, current_file_path, relativePath, glossaryTerm, glossaryFile, result;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options.dryRun && console.log("\n* Dry run enabled *\n");
            glossaryContent = "";

            if (options.glossaryPatternSeparator) {
              options.patternSeparator = options.glossaryPatternSeparator;
            } // Load the term files


            termsFiles = [];
            _context.prev = 4;
            _context.next = 7;
            return getFiles(options.termsDir, options.noGlossaryFiles);

          case 7:
            termsFiles = _context.sent;
            _context.next = 15;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](4);
            console.log("\u26A0  Not able to get files from folder: ".concat(options.termsDir));
            console.log("Check the path in option \"termsDir\"\n\n ".concat(_context.t0, " \nExiting..."));
            process.exit(1);

          case 15:
            if (termsFiles.length == 0) {
              console.log("\u26A0  No term files found");
              console.log("Might be wrong path \"".concat(options.termsDir, "\" in option ") + "\"termsDir\" or empty folder \nExiting...");
              process.exit(1);
            }

            _context.next = 18;
            return preloadTerms(termsFiles);

          case 18:
            termsData = _context.sent;
            // remove terms that don't have title or hoverText
            cleanTerms = cleanGlossaryTerms(termsData);
            termsByType = filterTypeTerms(cleanTerms, options.glossaryTermPatterns); // sort termsData alphabetically

            sortFiles(termsByType); // append terms to the glossary

            _iterator = _createForOfIteratorHelper(termsByType);

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                term = _step.value;
                current_file_path = path.resolve(process.cwd(), options.glossaryFilepath);
                relativePath = getRelativePath(current_file_path, term.filepath, options);
                glossaryTerm = getGlossaryTerm(term, relativePath);
                glossaryContent = glossaryContent + glossaryTerm;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            if (!options.dryRun) {
              _context.next = 28;
              break;
            }

            console.log("\n! These changes will not be applied in the glossary file." + "\nShowing the output below:\n\n".concat(glossaryContent, "\n\n"));
            _context.next = 47;
            break;

          case 28:
            glossaryFile = getOrCreateGlossaryFile(options.glossaryFilepath);
            _context.prev = 29;
            _context.next = 32;
            return fs.promises.writeFile(options.glossaryFilepath, glossaryFile + glossaryContent, "utf-8");

          case 32:
            result = _context.sent;
            _context.next = 39;
            break;

          case 35:
            _context.prev = 35;
            _context.t1 = _context["catch"](29);
            console.log("\u26A0  An error occurred while writing new data to " + "the file: ".concat(options.glossaryFilepath, "\n ").concat(_context.t1, " \nExiting..."));
            process.exit(1);

          case 39:
            _context.prev = 39;
            console.log("\xBB Parsing terms in the glossary");
            options.docsDir = options.glossaryFilepath;
            _context.next = 44;
            return parser(options);

          case 44:
            glossaryContent = _context.sent;
            console.log("\xBB Glossary is updated.");
            return _context.finish(39);

          case 47:
            console.log("\u2713 ".concat(termsByType.length, " terms found."));

          case 48:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 10], [29, 35, 39, 47]]);
  }));
  return _glossary.apply(this, arguments);
}

;
module.exports = glossary;