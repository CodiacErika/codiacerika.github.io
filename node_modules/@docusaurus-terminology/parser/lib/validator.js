"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function validateOptions(opts) {
  // docsDir
  validateType("docsDir", opts.docsDir, "string");
  validateNotEmpty("docsDir", opts.docsDir);
  checkRelativePath("docsDir", opts.docsDir); // termsDir

  validateType("termsDir", opts.termsDir, "string");
  validateNotEmpty("termsDir", opts.termsDir);
  checkRelativePath("termsDir", opts.termsDir); // glossary filepath

  validateType("glossaryFilepath", opts.glossaryFilepath, "string");
  validateNotEmpty("glossaryFilepath", opts.glossaryFilepath);
  checkRelativePath("glossaryFilepath", opts.glossaryFilepath); // noParseFiles

  validateType("noParseFiles", opts.noParseFiles, "array");

  var _iterator = _createForOfIteratorHelper(opts.noParseFiles),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var file = _step.value;
      checkRelativePath("noParseFiles item ".concat(file), file);
    } // noGlossaryFiles

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  validateType("noGlossaryFiles", opts.noGlossaryFiles, "array");

  var _iterator2 = _createForOfIteratorHelper(opts.noGlossaryFiles),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _file = _step2.value;
      checkRelativePath("noGlossaryFiles item ".concat(_file), _file);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}

function validateNotEmpty(key, value) {
  if (value.length == 0) {
    console.log("\"".concat(key, "\" needs to have a value.\nExiting..."));
    process.exit(1);
  }
}

function validateType(key, value, type) {
  if (type == "array") {
    if (!Array.isArray(value)) {
      var curType = (0, _typeof2["default"])(value);
      console.log("\"".concat(key, "\" should be an ").concat(type, ", not ").concat(curType, ".\nExiting..."));
      process.exit(1);
    }
  } else {
    if ((0, _typeof2["default"])(value) != type) {
      var _curType = (0, _typeof2["default"])(value);

      console.log("\"".concat(key, "\" should be a ").concat(type, ", not ").concat(_curType, ".\nExiting..."));
      process.exit(1);
    }
  }
}

function checkRelativePath(key, value) {
  if (value.charAt(0) == "/") {
    console.log("".concat(key, " should be a relative path, not absolute.\nExiting..."));
    process.exit(1);
  }
}

module.exports = validateOptions;